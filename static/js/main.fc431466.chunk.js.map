{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","components/PeopleList/PeopleList.tsx","pages/PeoplePage.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","PeopleList","people","slug","useParams","findRelativeParents","name","personToFind","find","person","to","classNames","sex","map","born","died","motherName","fatherName","PeoplePage","isLoading","hasError","hasEmptyTable","hasVisibleTable","App","useState","setAllVisiblePeople","setIsLoading","setHasError","setHasEmptyTable","setHasVisibleTable","loadPeopleFromServer","peopleFromServer","length","useEffect","role","isActive","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fc431466.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  people: Person[],\n}\n\nexport const PeopleList: React.FC<Props> = ({\n  people,\n}) => {\n  const { slug } = useParams();\n\n  const findRelativeParents = (name: string | null) => {\n    const personToFind = people.find(person => person.name === name);\n\n    if (personToFind) {\n      return (\n        <Link\n          to={`/people/${personToFind.slug}`}\n          className={classNames(\n            { 'has-text-danger': personToFind.sex === 'f' },\n          )}\n        >\n          {personToFind.name}\n        </Link>\n      );\n    }\n\n    return name || '-';\n  };\n\n  return (\n    <tbody>\n      {\n        people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.name}\n            className={classNames(\n              {\n                'has-background-warning': slug === person.slug,\n              },\n            )}\n          >\n            <td>\n              <Link\n                to={`/people/${person.slug}`}\n                className={classNames(\n                  { 'has-text-danger': person.sex === 'f' },\n                )}\n              >\n                {person.name}\n              </Link>\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {findRelativeParents(person.motherName)}\n            </td>\n            <td>\n              {findRelativeParents(person.fatherName)}\n            </td>\n          </tr>\n        ))\n      }\n    </tbody>\n  );\n};\n","import { Loader } from '../components/Loader';\nimport { PeopleList } from '../components/PeopleList/PeopleList';\nimport { Person } from '../types';\n\ninterface Props {\n  isLoading: boolean,\n  hasError: boolean,\n  hasEmptyTable: boolean,\n  hasVisibleTable: boolean,\n  people: Person[],\n}\n\nexport const PeoplePage: React.FC<Props> = ({\n  isLoading,\n  hasError,\n  hasEmptyTable,\n  hasVisibleTable,\n  people,\n}) => {\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n          {hasError && (\n            <p\n              data-cy=\"peopleLoadingError\"\n              className=\"has-text-danger\"\n            >\n              Something went wrong\n            </p>\n          )}\n\n          {hasEmptyTable ? (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          ) : ''}\n\n          {hasVisibleTable && (\n            <table\n              data-cy=\"peopleTable\"\n              // eslint-disable-next-line max-len\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <PeopleList\n                people={people}\n              />\n            </table>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport {\n  Navigate,\n  NavLink,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport './App.scss';\nimport { getPeople } from './api';\nimport { Person } from './types';\nimport { PeoplePage } from './pages/PeoplePage';\n\nexport const App: React.FC = () => {\n  const [people, setAllVisiblePeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [hasEmptyTable, setHasEmptyTable] = useState(false);\n  const [hasVisibleTable, setHasVisibleTable] = useState(false);\n\n  const tableCheckHandler = () => {\n    if (people.length === 0 && !hasError) {\n      setHasEmptyTable(true);\n    }\n\n    if (!hasEmptyTable && !hasError) {\n      setHasVisibleTable(true);\n    }\n\n    if (people.length > 0) {\n      setHasEmptyTable(false);\n    }\n  };\n\n  const loadPeopleFromServer = async () => {\n    try {\n      const peopleFromServer = await getPeople();\n\n      setAllVisiblePeople(peopleFromServer);\n      setIsLoading(false);\n\n      tableCheckHandler();\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    setHasError(false);\n\n    loadPeopleFromServer();\n  }, [people]);\n\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              className={({ isActive }) => classNames(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              className={({ isActive }) => classNames(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n            <Route\n              path=\"/home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n\n            <Route path=\"people\">\n              <Route\n                index\n                element={(\n                  <PeoplePage\n                    isLoading={isLoading}\n                    hasError={hasError}\n                    hasEmptyTable={hasEmptyTable}\n                    hasVisibleTable={hasVisibleTable}\n                    people={people}\n                  />\n                )}\n              />\n              <Route\n                path=\":slug\"\n                element={(\n                  <PeoplePage\n                    isLoading={isLoading}\n                    hasError={hasError}\n                    hasEmptyTable={hasEmptyTable}\n                    hasVisibleTable={hasVisibleTable}\n                    people={people}\n                  />\n                )}\n              />\n            </Route>\n            <Route\n              path=\"*\"\n              element={\n                <h1 className=\"title\">Page not found</h1>\n              }\n            />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}